// <auto-generated />
using System;
using KiuWho.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KiuWho.Migrations
{
    [DbContext(typeof(ChatContext))]
    [Migration("20250602122723_Sticker Colection")]
    partial class StickerColection
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KiuVinme.Entities.Ads", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<int>("ImpressionCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUserCreated")
                        .HasColumnType("boolean");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean");

                    b.HasKey("Uid");

                    b.ToTable("Ads");
                });

            modelBuilder.Entity("KiuVinme.Entities.Logs", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChatId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Uid");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("KiuVinme.Entities.Sticker", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StickerPackUid")
                        .HasColumnType("uuid");

                    b.HasKey("Uid");

                    b.HasIndex("StickerPackUid");

                    b.ToTable("Stickers");
                });

            modelBuilder.Entity("KiuVinme.Entities.StickerPack", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Uid");

                    b.ToTable("StickerPacks");
                });

            modelBuilder.Entity("KiuVinme.Entities.Sticker", b =>
                {
                    b.HasOne("KiuVinme.Entities.StickerPack", "StickerPack")
                        .WithMany("Stickers")
                        .HasForeignKey("StickerPackUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StickerPack");
                });

            modelBuilder.Entity("KiuVinme.Entities.StickerPack", b =>
                {
                    b.Navigation("Stickers");
                });
#pragma warning restore 612, 618
        }
    }
}
